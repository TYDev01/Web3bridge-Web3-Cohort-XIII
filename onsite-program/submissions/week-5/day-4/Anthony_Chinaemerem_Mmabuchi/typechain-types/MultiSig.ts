/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface MultiSigInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approve"
      | "approved"
      | "execute"
      | "isOwner"
      | "owners"
      | "required"
      | "revoke"
      | "submit"
      | "transactions"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approve"
      | "Deposit"
      | "Execute"
      | "Revoke"
      | "Submit"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approved",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "owners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "required", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "revoke",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submit",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approved", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owners", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "required", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "submit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;
}

export namespace ApproveEvent {
  export type InputTuple = [owner: AddressLike, txId: BigNumberish];
  export type OutputTuple = [owner: string, txId: bigint];
  export interface OutputObject {
    owner: string;
    txId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [sender: AddressLike, amount: BigNumberish];
  export type OutputTuple = [sender: string, amount: bigint];
  export interface OutputObject {
    sender: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecuteEvent {
  export type InputTuple = [txId: BigNumberish];
  export type OutputTuple = [txId: bigint];
  export interface OutputObject {
    txId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevokeEvent {
  export type InputTuple = [owner: AddressLike, txId: BigNumberish];
  export type OutputTuple = [owner: string, txId: bigint];
  export interface OutputObject {
    owner: string;
    txId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubmitEvent {
  export type InputTuple = [txId: BigNumberish];
  export type OutputTuple = [txId: bigint];
  export interface OutputObject {
    txId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MultiSig extends BaseContract {
  connect(runner?: ContractRunner | null): MultiSig;
  waitForDeployment(): Promise<this>;

  interface: MultiSigInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approve: TypedContractMethod<[_txId: BigNumberish], [void], "nonpayable">;

  approved: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  execute: TypedContractMethod<[_txId: BigNumberish], [void], "nonpayable">;

  isOwner: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owners: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  required: TypedContractMethod<[], [bigint], "view">;

  revoke: TypedContractMethod<[_txId: BigNumberish], [void], "nonpayable">;

  submit: TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish, _data: BytesLike],
    [void],
    "nonpayable"
  >;

  transactions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, boolean] & {
        to: string;
        value: bigint;
        data: string;
        executed: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<[_txId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approved"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<[_txId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isOwner"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owners"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "required"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "revoke"
  ): TypedContractMethod<[_txId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submit"
  ): TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish, _data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transactions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, boolean] & {
        to: string;
        value: bigint;
        data: string;
        executed: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "Approve"
  ): TypedContractEvent<
    ApproveEvent.InputTuple,
    ApproveEvent.OutputTuple,
    ApproveEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Execute"
  ): TypedContractEvent<
    ExecuteEvent.InputTuple,
    ExecuteEvent.OutputTuple,
    ExecuteEvent.OutputObject
  >;
  getEvent(
    key: "Revoke"
  ): TypedContractEvent<
    RevokeEvent.InputTuple,
    RevokeEvent.OutputTuple,
    RevokeEvent.OutputObject
  >;
  getEvent(
    key: "Submit"
  ): TypedContractEvent<
    SubmitEvent.InputTuple,
    SubmitEvent.OutputTuple,
    SubmitEvent.OutputObject
  >;

  filters: {
    "Approve(address,uint256)": TypedContractEvent<
      ApproveEvent.InputTuple,
      ApproveEvent.OutputTuple,
      ApproveEvent.OutputObject
    >;
    Approve: TypedContractEvent<
      ApproveEvent.InputTuple,
      ApproveEvent.OutputTuple,
      ApproveEvent.OutputObject
    >;

    "Deposit(address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Execute(uint256)": TypedContractEvent<
      ExecuteEvent.InputTuple,
      ExecuteEvent.OutputTuple,
      ExecuteEvent.OutputObject
    >;
    Execute: TypedContractEvent<
      ExecuteEvent.InputTuple,
      ExecuteEvent.OutputTuple,
      ExecuteEvent.OutputObject
    >;

    "Revoke(address,uint256)": TypedContractEvent<
      RevokeEvent.InputTuple,
      RevokeEvent.OutputTuple,
      RevokeEvent.OutputObject
    >;
    Revoke: TypedContractEvent<
      RevokeEvent.InputTuple,
      RevokeEvent.OutputTuple,
      RevokeEvent.OutputObject
    >;

    "Submit(uint256)": TypedContractEvent<
      SubmitEvent.InputTuple,
      SubmitEvent.OutputTuple,
      SubmitEvent.OutputObject
    >;
    Submit: TypedContractEvent<
      SubmitEvent.InputTuple,
      SubmitEvent.OutputTuple,
      SubmitEvent.OutputObject
    >;
  };
}
